extends ../layout

append stylesheets
  style
    .disabled {
      color: #CCC;
      font-weight: normal;
    }
    .data {
      font-weight:bold;
      color:red;
    }
    #eventState {
      font-size: 50%;
    }
    .event {
      float: left;
      width: 65%;
      clear: left;
    }
    #target {
      float: right;
      width: 125px;
      padding: 0px 10px 10px;
      background: #E6E2AE;
      border: 1px solid #333;
    }
    #monitor {
      height: 390px;
      overflow: hidden;
      padding: 10px 10px 10px 10px;
      position: absolute;
      font-size: 1.2em;
      width: 200px;
      background-color: rgb(90,115,185);
      -webkit-box-shadow: 1px 1px 2px rgba(0,0,0,.75);
      -moz-box-shadow: 1px 1px 2px rgba(0,0,0,.75);
      box-shadow: 1px 1px 2px rgba(0,0,0,.75);
      left: 800px;
    }
    #monitor h2 small {
      font-size: 70%;
      display: inline-block;
      padding: 5px;
    }
    #monitor h2 small:hover {
      background-color: rgb(255,255,204);
      color: black;
      text-shadow: 1px 1px 2px rgba(255,255,255,.75);
    }
    #monitor p {
      font-size: 60%;
      margin: 0;
      padding: 0;
    }
    #monitorOverlay {
      position: absolute;
      left: 0;
      top: -3px;
      width: 150px;
      height: 330px;
    }
    #sidebar .event {
      float: left;
      width: 65%;
      clear: left;
    }
    #monitorResults {
      margin-top:5px;
    }
    #keydown, #keyup, #keypress {
      float: left;
      width: 30%;
      padding-right: 5px;
      margin-bottom: 10px;
    }
    #keydown, #keyup {
      margin-right: 5px;
    }
    #keydown p, #keyup p, #keypress p {
      margin-bottom: 3px;
    }
    #keyup ul, #keydown ul, #keypress ul {
      margin: 0px;
      padding: 0px;
      list-style: none;
    }
    #keyup span, #keydown span, #keypress span {
      float: right;
      width: 40%;
    }
    .data {
      font-weight:bold;
      color:red;
    }
    #eventState {
      font-size: 50%;
    }
    #keys {
      overflow: hidden;
    }
    #keydown {
      float: left;
      width: 30%;
      padding-right: 5px;
      margin-bottom: 10px;
    }
    #keydown {
      margin-right: 5px;
    }
    #keypress {
      float: left;
      width: 30%;
      padding-right: 5px;
      margin-bottom: 10px;
    }
    #keyup {
      float: left;
      width: 30%;
      padding-right: 5px;
      margin-bottom: 10px;
    }
    #keyup {
      margin-right: 5px;
    }
    form p {
      margin: 5px 0;
      font-size: 80%;
      color: #CCC;
    }
    input:focus {
      background-color: #9C9;
    }
    .events li {
      font-size: 95%;
      margin: 5px 0 0 0;
    }
    .events h2 {
      margin: 10px 0 5px 0;
    }

append scripts
  script(src='/_js/jquery-1.8.2.min.js')
  script(src='/_js/site.js')
  script
    $(document).ready(function() {

      var eventsBound=false;
      var mouseMoveBound=true;

      $('<div id="monitorOverlay"></div>').appendTo($('#monitor'));
      $('#monitor h2 small').wrap('<a href="#"></a>');
      $('#monitor h2').click(function(evt) {
        $('#monitorResults').html('');
        evt.stopPropagation();                                  });

      $('#mousemove small').wrap('<a href="#"></a>');
      $('#mousemove a').toggle(function(evt) {
        $(document).unbind('mousemove');
        $('#mousemove small').text('enable');
        $(this).parent().addClass('disabled');
        mouseMoveBound=false;
                                        },
                                function(evt) {
        $('#mousemove small').text('disable');
        $(this).parent().removeClass('disabled');
        mouseMoveBound=true;
        $(document).bind('mousemove', function(evt) {
          handle($('#'+evt.type),evt,this);
        });
                                        });

      var events=['click',
            'dblclick',
            'mouseover',
            'mouseout',
            'mousemove',
            'mousedown',
            'mouseup',
            'keyup',
            'keydown',
            'keypress',
            'focus',
            'blur'
            ];

      var winEvents=['load',
               'resize',
               'scroll',
               'unload'];



      $('#button').click(function() {
        if ($(this).val()=='start') {
          $(this).val('stop');
          bindEvents();
          $('#eventState').text('(active)');
        } else {
          $(this).val('start');
          unBindEvents();
          $('#eventState').text('(disabled)');
        }
      });


      var unBindEvents = function() {
        for (var i=0;i<events.length; i++) {
        $(document).unbind(events[i]);
        $('*:not("#monitor h2, #button")').unbind(events[i]);
        }
        for (var j=0;j<winEvents.length; j++) {
        $(window).unbind(winEvents[j]);
        }
        eventsBound=false;
      }


      var bindEvents= function() {

      eventsBound = true;

      $(window).unload(function() {
                                alert('"bye bye!" says the unload event.');
                                });

      $('#prop, #noProp').bind('click.test',function(evt) {
        var idName = $(this).attr('id');
        $('#' + idName + 'Elems').text('1');
        $('#' + idName + 'Tags').text(this.tagName);
        handle($('#click'),evt,this);
        if (idName == 'noProp') evt.stopPropagation();
      });

      $(':text').bind('focus.test',function(evt) {
        handle($('#focus'),evt,this);
        evt.stopPropagation();
      });

      $(':text').bind('blur.test',function(evt) {
        handle($('#blur'),evt,this);
        evt.stopPropagation();
      });

      $('*:has(#prop)').bind('click.test',function(evt) {
          if ($(evt.target).attr('ID')!='prop') return;
          $('#propTags').append(", " + this.tagName);
          var currentClicks = parseInt($('#propElems').text());
          $('#propElems').text(currentClicks + 1);
          handle($('#click'),evt,this);
      });



      for (i=0;i<events.length;i++) {
      $(document).bind(events[i]+'.test',function(evt) {
        handle($('#'+evt.type),evt,this);
      });
      }


      for (var j=0;j<winEvents.length;j++) {
      $(window).bind(winEvents[j]+'.test',function(evt) {
        handle($('#'+evt.type),evt,this);
      });
      }

      $(document).bind('keydown.test',function(evt) {
              updateKey('#keydown',evt);
      });
      $(document).bind('keyup.test',function(evt) {
              updateKey('#keyup',evt);
      });
      $(document).bind('keypress.test',function(evt) {
              updateKey('#keypress',evt);
      });

      };

      bindEvents();

      function handle(elem,evt,targElem) {
        if (eventsBound) {
          if (evt.type=='mousemove' && ! mouseMoveBound) {
            return;
          }
          highlight(elem);
          updateMonitor(evt);
          updateMouse(evt);
        }
      }

      function highlight(elem) {
        if (elem.is(':animated')) return;
        elem.animate({ backgroundColor: "red" },250).animate({ backgroundColor: "transparent" }, 1000);
      }

      function updateMonitor(evt) {
        var results = $('#monitorResults');
        var currHTML = results.html();
        currHTML = currHTML.length > 1200 ? currHTML.slice(0,1200) : currHTML;
        var eventMessage = '<p class="event">' + evt.type + '</p>';
        var target = evt.target.tagName ? evt.target.tagName : '';
        var targetMessage = '<p class="target">' + target + '</p>';
        results.html(eventMessage+targetMessage+currHTML );
      }

      function updateMouse(evt) {
        $('#x').text(evt.pageX);
        $('#y').text(evt.pageY);
      }

      function updateKey(elem, evt) {
        $('.which',elem).text(evt.which);
        $('.shiftkey',elem).text(evt.shiftKey);
        $('.metakey',elem).text(evt.metaKey);
        $('.keycode',elem).text(evt.keyCode);
        $('.altkey',elem).text(evt.altKey);
        $('.ctrlkey',elem).text(evt.ctrlKey);
        var key = (evt.type=='keypress') ? evt.which : evt.keyCode;
        var letter = String.fromCharCode(key);
        $('.letter',elem).text(letter);
      }
      }); // end ready

block content
  .content
    #monitor
      h2
        | Event Monitor
        small (clear)
      p.event
        strong Event
      p.target
        strong Target
      #monitorResults
    .main.events
      h1
        | Events
        span#eventState (active)
        input#button(type='button', name='button', value='stop')
      h2.shadowLine Click Events
      ul.sideBySide.clear
        li#click onclick
        li#dblclick ondoubleclick
        li#mousedown mousedown
        li#mouseup mouseup
      h2.shadowLine
        | Mouse Events
        small
          | X:
          span#x.data
          | Y:
          span#y.data
      ul.sideBySide.clear
        li#mouseover mouseover
        li#mouseout mouseout
        li#mousemove
          | mousemove
          small disable
      #keys
        h2.shadowLine Key Events
        #keydown.clear
          p keydown
          ul
            li
              span.letter.data  
              | Key
            li
              span.keycode.data  
              | keyCode
            li
              span.which.data  
              | which
            li
              span.altkey.data  
              | altKey
            li
              span.ctrlkey.data  
              | ctrlKey
            li
              span.metakey.data  
              | metaKey
            li
              span.shiftkey.data  
              | shiftKey
        #keyup.clear
          p keyup
          ul
            li
              span.letter.data  
              | Key
            li
              span.keycode.data  
              | keyCode
            li
              span.which.data  
              | which
            li
              span.altkey.data  
              | altKey
            li
              span.ctrlkey.data  
              | ctrlKey
            li
              span.metakey.data  
              | metaKey
            li
              span.shiftkey.data  
              | shiftKey
        #keypress.clear
          p keypress
          ul
            li
              span.letter.data  
              | Key
            li
              span.keycode.data  
              | keyCode
            li
              span.which.data  
              | which
            li
              span.altkey.data  
              | altKey
            li
              span.ctrlkey.data  
              | ctrlKey
            li
              span.metakey.data  
              | metaKey
            li
              span.shiftkey.data  
              | shiftKey
      h2.shadowLine Blur/Focus (tab to links or form elements)
      ul.sideBySide.clear
        li#focus focus
        li#blur blur
      form(action='', method='get')
        p
          label(for='test') Click or tab into me
          | ...
          input#test(type='text', name='test')
          | ...then click or tab out of me.
      h2.shadowLine Page Events
      ul.sideBySide.clear
        li#load load
        li#resize resize
        li#scroll scroll
        li#unload unload

block end
  #resources
    p.open
      | +

    h2
      | Test Beds
    ul.nav
      li
        a(href='/selectors') jQuery Selectors Testbed
      li
        a(href='/content_functions') jQuery Content Functions Test Bed
      li
        a(href='/events') Events Test Bed
      li
        a(href='/effects') jQuery Effects Test Bed
      li
        a(href='/array_methods') Array Methods
      li
        a(href='/regex_tester') Regular Expression Tester

    h2
      | jQuery Resources
    ul.nav
      li
        a(href='http://jquery.com') jQuery
      li
        a(href='http://jqueryui.com/') jQuery UI
      li
        a(href='http://jquerymobile.com/') jQuery Mobile
      li
        a(href='http://jqapi.com/') jQAPI.com
